name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb coverage
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests with coverage
      run: |
        xvfb-run -a python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Run integration tests
      run: |
        xvfb-run -a python -m pytest tests/test_vat_integration.py -v
    
    - name: Run validation tests
      run: |
        xvfb-run -a python -m pytest test_real_data_alignment.py -v
        xvfb-run -a python -m pytest test_france_domain.py -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pylint bandit safety
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Type checking with mypy
      run: mypy . --ignore-missing-imports --no-error-summary
      continue-on-error: true
    
    - name: Lint with pylint
      run: pylint **/*.py --disable=all --enable=E,W,C0103,C0111
      continue-on-error: true
    
    - name: Security check with bandit
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for known security vulnerabilities
      run: safety check
      continue-on-error: true

  build-and-package:
    runs-on: windows-latest
    needs: [test, code-quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name=AMZSCAN main.py
    
    - name: Test executable
      run: |
        dist/AMZSCAN.exe --version || echo "Executable test completed"
      continue-on-error: true
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: AMZSCAN-Windows
        path: dist/AMZSCAN.exe
        retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [test, code-quality, build-and-package]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.code-quality.result == 'success' && needs.build-and-package.result == 'success' }}
      run: echo "✅ All checks passed! Ready for merge."
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.code-quality.result == 'failure' || needs.build-and-package.result == 'failure' }}
      run: echo "❌ Some checks failed. Please review before merging."
